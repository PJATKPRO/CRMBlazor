@using CRMBlazor.Shared.Data.CRMBlazorDb.Models;
@using CRMBlazor.Shared.Extensions;
@using Radzen.Blazor
@using System.Linq.Expressions;
@typeparam TValue where TValue: new()



@foreach(var property in Value.GetType().GetProperties().Where(x => !x.PropertyType.FullName.ToLower().Contains("collection")))
{
<div class="row">
    <div class="col">
        @property.Name
    </div>

        <div class="col" > 

                @switch (property.PropertyType.FullName)
                {
                case "System.Int32":
                    <RadzenNumeric TValue="int" Value="@Convert.ToInt32(property.GetValue(Value))" ValueChanged="value => property.SetValue(Value, value)" />

                    break;
                case "System.Decimal":
                    <RadzenNumeric TValue="decimal" Value="@Convert.ToDecimal(property.GetValue(Value))" ValueChanged="value => property.SetValue(Value, value)" />

                    break;
                case "System.Double":
                    <RadzenNumeric TValue="double" Value="@Convert.ToDouble(property.GetValue(Value))" ValueChanged="value => property.SetValue(Value, value)" />
                    break;
                case "System.String":
                    <RadzenTextBox Value="@property.GetValue(Value)?.ToString()" ValueChanged="value => property.SetValue(Value, value)" />
                    break;
                case "System.Boolean":
                    <RadzenCheckBox TValue="bool" Value="(bool)property.GetValue(Value)" ValueChanged="value => property.SetValue(Value, value)" />
                    break;
                default: /*Unsuported/Not implemented editing*/
                @if(Deph > 0)
                        @(
                CreateComponent(property.PropertyType, new() { { "Deph", Deph-- }, { "Value", property.GetValue(Value) }, { "ValueChanged", EventCallback.Factory.Create<object>(this, __value => property.SetValue(Value, __value.CastToReflected(property.PropertyType))) } })
                            )
                    break;
                }
    </div>
</div>
}




@code {

    [Parameter]
    public TValue Value { get; set; }

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    [Parameter]
    public int? Deph { get; set; } = 3;

    protected override void OnParametersSet()
    {


        if(Value is null)
        {
            Value = new();
        }

        base.OnParametersSet();
    }


    private RenderFragment CreateComponent(Type tvalue, Dictionary<string,object> parameters) => builder =>
    {

        var type = typeof(Component<>).MakeGenericType(new[] { tvalue });
        builder.OpenComponent(1, type);
        if(parameters is not null){
            int i = 2;
            foreach (var param in parameters)
            {
                builder.AddAttribute(i++, param.Key, param.Value);
            
            }
        }
        builder.CloseComponent();


    };


}
