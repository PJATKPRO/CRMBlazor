@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using CRMBlazor.Shared
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>
<RadzenButton Text="stop" Click="stop"/>

@if(client is not null){


    <Component TValue="CRMBlazor.Shared.Data.CRMBlazorDb.Models.Client" Value="client" ValueChanged="__value => client = (CRMBlazor.Shared.Data.CRMBlazorDb.Models.Client)__value"></Component>

}
<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>
<cache expires-after="@TimeSpan.FromSeconds(120)">
   

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
</cache>

@code {
    private CRMBlazor.Shared.Data.CRMBlazorDb.Models.Client client;
    private WeatherForecast[]? forecasts;
    private IEnumerable<CRMBlazor.Shared.Data.CRMBlazorDb.Models.Client>? clients;

    void stop()
    {
        return;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("api/WeatherForecast");
            clients = await Http.GetFromJsonAsync<IEnumerable<CRMBlazor.Shared.Data.CRMBlazorDb.Models.Client>>("api/Client");
            client = clients.FirstOrDefault();

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
