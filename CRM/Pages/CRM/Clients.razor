@page "/CRM/Clients"
@using CRMBlazor.Data.CRMBlazorDb;
@using CRMBlazor.Helpers;
@using CRMBlazor.Pages.CRM.Shared;
@using Microsoft.EntityFrameworkCore;
@inject IDbContextFactory<CRMBlazorDbContext> _contextFactory

@inject DialogService DialogService

<style>
    ul {
        list-style: none;
        padding: 0;
    }
</style>

<h3>Klienci</h3>

@if (ClientList == null)
{
    <h3>loading...</h3>
}
else
{
    <ul>
        @foreach (var client in ClientList)
            {
                <li>
                <h4> @client.Name @client.Surname @client.PeselOrNip </h4>
                <RadzenButton Text="Edytuj" Click="() => selectedClient = client"></RadzenButton>
                 
            </li>
            }
    </ul>
    @if (selectedClient is not null)
    {
        
        <RadzenButton Icon="close"  Click="() => selectedClient = null" style="z-index: 4; position: absolute; top: 20px; right: 20px;"/>
        <ClientForm Value="selectedClient" Submitted="(_value) => {Update(_value); selectedClient = null;}"></ClientForm>
    }
}

<RadzenButton Text="dodaj klienta" Click="() => selectedClient = new()" />

@code {
    private HashSet<Client> ClientList;
    private Client? selectedClient;

    protected override async Task OnParametersSetAsync()
    {
        using (var db = await _contextFactory.CreateDbContextAsync())
        {
            ClientList = db.Clients.AsNoTracking().ToHashSet();
        }
    }


    private async Task Update(Client client)
    {
        using (var db = await _contextFactory.CreateDbContextAsync())
        {
            db.Clients.Update(client);
            await db.SaveChangesAsync();
        }
    }
}
