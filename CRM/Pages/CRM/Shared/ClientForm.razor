@inject IDbContextFactory<CRMBlazorDbContext> _context
@using CRMBlazor.Data.CRMBlazorDb;
@using Microsoft.EntityFrameworkCore;

<style>
    .background {
        position: absolute;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 3;
    }

    .formCard {
        position: absolute;
        max-width: 1000px;
        max-height: 80vh;
        border-radius: 20px;
        padding: 50px;
        overflow: scroll;
    }

    ul {
        list-style: none;
        padding: 0;
    }
</style>

<div class="background">
    <div class="rz-background-color-base-100 formCard">
        
        <EditForm EditContext="editContext" OnValidSubmit="OnSubmit">
            @*EditForm to komponent formularza wymaga parametru EditContext który jest jako prywatna i zainicializowana w OnParametersSet albo OnParametersSetAsync*@
            <DataAnnotationsValidator />
            <ValidationSummary />
            <ul>
                <li>
                    <h5>Imię</h5>
                    <RadzenTextBox @bind-Value="Value.Name"></RadzenTextBox>
                </li>
                <li>
                    <h5>Nazwisko</h5>
                    <RadzenTextBox @bind-Value="Value.Surname"></RadzenTextBox>
                </li>
                <li>
                    <h5>Adres e-mail</h5>
                    <RadzenTextBox @bind-Value="Value.Email"></RadzenTextBox>
                </li>
                <li>
                    <h5>Pesel lub NIP</h5>
                    <RadzenTextBox @bind-Value="Value.PeselOrNip"></RadzenTextBox>
                </li>
            </ul>

            @if (Value.Address is not null)
            {
                <AddressForm @bind-Value="Value.Address" />

                <RadzenButton Text="usuń adres zamieszkania" Click="() => Value.Address = null" />
            }
            else
            {
                <RadzenButton Text="dodaj adres zamieszkania" Click="() => Value.Address = new()" />
            }

            @if (Value.InvestitionAddress is not null)
            {
                <AddressForm @bind-Value="Value.InvestitionAddress" />

                <RadzenButton Text="usuń adres inwestycji" Click="() => Value.InvestitionAddress = null" />
            }
            else
            {
                <RadzenButton Text="dodaj adres inwestycji" Click="() => Value.InvestitionAddress = new()" />
            }


            <RadzenButton ButtonType="ButtonType.Submit">Zapisz</RadzenButton>
        </EditForm>
    </div>
</div>

@code {
    /// <summary>
    /// Value for form
    /// </summary>
    [Parameter]
    public Client? Value { get; set; } = null!;

    /// <summary>
    /// Gets or sets the value changed.
    /// </summary>
    /// <value>The value changed.</value>
    [Parameter]
    public EventCallback<Client> Submitted { get; set; }

    private EditContext? editContext;


    protected override void OnParametersSet()
    {
        if(Value == null){
            Value = new();
        }

        editContext = new (Value);
        base.OnParametersSet();
    }

    private async Task OnSubmit(){
        await Submitted.InvokeAsync(Value);
    }
        
}
